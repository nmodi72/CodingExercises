package main.leetcode;

import java.util.HashMap;
import java.util.Hashtable;

/**
 * This is the leetcode problem: # 389
 * Find the difference
 *
 * Given two strings s and t which consist of only lowercase letters.
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 * Find the letter that was added in t.
 *
 * Example: Input s="abcd" t="abcde"
 * output e
 * Explaination: 'e' is the letter that was added.
 */
public class FindTheDifference {
    // gives 14.98 % beat timing
    public char findTheDifference(String s, String t) {
        if(s == null || t == null){
            return Character.MIN_VALUE;
        }
        // HashMap which keeps track of the a - z count
        HashMap<Character, Integer> hashMap = new HashMap<>();
        for(char ch = 'a'; ch <= 'z'; ++ch){
            hashMap.put(ch, 0);
        }
        for (char charOfStringS : s.toCharArray()) {
            int value = hashMap.get(charOfStringS);
            hashMap.put(charOfStringS, value + 1);
        }
        for (char charOfStringT : t.toCharArray()) {
            if(hashMap.get(charOfStringT) != 0){
                int value = hashMap.get(charOfStringT);
                hashMap.put(charOfStringT, value - 1);
            } else {
                return charOfStringT;
            }

        }
        return Character.MIN_VALUE;
    }

    // gives 8.01 % beat timing
    public char findTheDifferenceAnotherMethod(String s, String t) {
        if(s == null || t == null){
            return Character.MIN_VALUE;
        }
        // HashMap which keeps track of the a - z count
        HashMap<Character, Integer> hashMap = new HashMap<>();
        for (char charOfStringS : s.toCharArray()) {
            if(!hashMap.containsKey(charOfStringS)) {
                hashMap.put(charOfStringS, 1);
            } else {
                int value = hashMap.get(charOfStringS);
                hashMap.put(charOfStringS, value + 1);
            }
        }
        for (char charOfStringT : t.toCharArray()) {
            if(hashMap.containsKey(charOfStringT)) {
                if(hashMap.get(charOfStringT) != 0){
                    int value = hashMap.get(charOfStringT);
                    hashMap.put(charOfStringT, value - 1);
                } else {
                    return charOfStringT;
                }
            } else{
                return charOfStringT;
            }
        }
        return Character.MIN_VALUE;
    }

    // gives  % beat timing
    public char findTheDifferenceWithHashTable(String s, String t) {
        if(s == null || t == null){
            return Character.MIN_VALUE;
        }
        // HashMap which keeps track of the a - z count
        Hashtable<Character, Integer> hashMap = new Hashtable<>();
        for(char ch = 'a'; ch <= 'z'; ++ch){
            hashMap.put(ch, 0);
        }
        for (char charOfStringS : s.toCharArray()) {
            int value = hashMap.get(charOfStringS);
            hashMap.put(charOfStringS, value + 1);
        }
        for (char charOfStringT : t.toCharArray()) {
            if(hashMap.get(charOfStringT) != 0){
                int value = hashMap.get(charOfStringT);
                hashMap.put(charOfStringT, value - 1);
            } else {
                return charOfStringT;
            }

        }
        return Character.MIN_VALUE;
    }

    // gives 7` % beat timing - 7ms
    public char findTheDifferenceWithXOR(String s, String t) {
        char bit = 0;
        char[] s1 = s.toCharArray();
        char[] t1 = t.toCharArray();

        for(int i = 0; i<s.length(); i++){
            bit ^= s1[i];
            bit ^= t1[i];
        }
        bit ^= t1[t.length()-1];
        return bit;
    }
    // gives 87.77 % beat timing - 6ms
    public char findTheDifferenceBestSolution(String s, String t) {
        if (s == null || t == null) return ' ';
        int[] index = new int[26];
        char[] ss = s.toCharArray();
        int sLen = ss.length;
        char[] tt = t.toCharArray();
        int tLen = tt.length;
        for (int i = 0; i < sLen; i++) {
            index[ss[i] - 'a']++;
        }
        for (int i = 0; i < tLen; i++) {
            index[tt[i] - 'a']--;
        }
        for (int i = 0; i < 26; i++) {
            if (index[i] < 0) return (char) (i + 'a');
        }
        return ' ';
    }
}
